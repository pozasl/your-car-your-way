enum Role {
    USER,
    CS,
    ADMIN
}

enum VehiculeCategoryRef {
    M,
    N,
    E,
    H,
    C,
    D,
    I,
    J,
    S,
    R,
    F,
    G,
    P,
    U,
    L,
    W,
    O,
    X
}

type Query {
    userById(id: ID!): User
}

type Mutation {
    createUser(user: NewUser!): User
}

input NewUser {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    birthDate: DateTime!
    address: NewAddress!
}

input NewAddress {
    street: String!
    city: String!
    state: String
    zipcode: String!
    country: String!
    timezone: String!
}

type User @key(fields: "id"){
    id: ID!
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    birthDate: DateTime!
    address: Address!
    roles: [Role]!
    createdAt: DateTime
    updatedAt: DateTime
}



type Agency @key(fields: "id"){
    id: ID!
    name: String!
    address: Address!
    vehicules: [Vehicule]
}

type Address @key(fields: "id"){
    id: ID!
    street: String!
    city: String!
    state: String
    zipcode: String!
    country: String!
    timezone: String!
}

type Vehicule @key(fields: "id"){
    id: ID!
    regNumber: String!
    category: VehiculeCategory
}

type VehiculeCategory @key(fields: "ref"){
    ref: VehiculeCategoryRef
    name: String!
}

scalar Date
scalar DateTime