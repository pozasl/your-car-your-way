enum Role {
    CUSTOMER,
    CUSTOMER_SERVICE,
}

enum Title {
    MR,
    MRS,
    MISS
}

enum VehiculeCategoryRef {
    M,
    N,
    E,
    H,
    C,
    D,
    I,
    J,
    S,
    R,
    F,
    G,
    P,
    U,
    L,
    W,
    O,
    X
}

type Query {
    account(id: ID!): Account
    accounts: [Account!]
    token(credentials: AccountCredentials!): String
    me: Account
    usersOnline(role: Role!): [UserOnline!]
    liveMessages(customerId: ID!, customerServiceId: ID!): [LiveMessage!]
}

type Mutation {
    registerCustomer(account: NewCustomerAccountInput!): OperationResult
    # updateAccount(account: CustomerAccountInput!): Void
    # deleteAccount(account: CustomerAccountInput!): Void
    sendLiveMessage(message: LiveMessageInput!): LiveMessage
    setUserOnline(user: UserOnlineInput!, online: Boolean): OperationResult
}

type Subscription {
  newLiveMessage(toUserId: ID!): LiveMessage
  customersOnline: [UserOnline!]
  customerServiceOnline: [UserOnline!]
}

input AccountCredentials {
    email: String!
    password: String!
}

input UserOnlineInput {
    id: ID!
    name: String!
    role: Role!
}

input NewAccounInput {
    title: Title!
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    birthDate: Date!
}

input NewCustomerAccountInput {
    title: Title!
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    birthDate: Date!
    address: NewAddressInput!
}

input CustomerAccountInput {
    id: ID!
    title: Title!
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    role: Role!
    birthDate: Date!
    address: NewAddressInput!
}

input NewAddressInput {
    street: String!
    complement: String!
    city: String!
    postalCode: String!
    region: String
    countryCode: String!
}

input LiveMessageInput {
    fromUserId: ID!
    toUserId: ID!
    content: String!
}

type Account {
    id: ID!
    title: Title!
    firstName: String!
    lastName: String!
    email: String!
    birthDate: Date!
    address: Address
    role: Role!
    createdAt: DateTime
    updatedAt: DateTime
}

type UserOnline {
    id: ID!
    name: String!
    role: Role!
}

type Agency {
    id: ID!
    name: String!
    address: Address!
    vehicules: [Vehicule]
}

type Address {
    id: ID!
    street: String!
    complement: String!
    city: String!
    postalCode: String!
    region: String
    countryCode: String!
}

type Vehicule {
    registrationNumber: String!
    category: VehiculeCategory!
    available: Boolean!
}

type VehiculeCategory {
    ref: VehiculeCategoryRef
    name: String!
}

type LiveMessage {
    from: Account!
    to: Account!
    at: DateTime
    content: String!
}

type OperationResult {
    message: String!
}

scalar CountryCode
scalar Date
scalar DateTime